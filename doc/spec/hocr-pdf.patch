diff -ur hocr-tools-1.3.0.orig/hocr-pdf hocr-tools-1.3.0/hocr-pdf
--- hocr-tools-1.3.0.orig/hocr-pdf	2019-03-02 10:33:48.000000000 -0500
+++ hocr-tools-1.3.0/hocr-pdf	2020-05-14 08:42:24.920993238 -0400
@@ -48,9 +48,10 @@
         sys.stdout.write(data)
 
 
-def export_pdf(playground, default_dpi, savefile=False):
+def export_pdf(playground, default_dpi, scale_hocr, savefile=False):
     """Create a searchable PDF from a pile of HOCR + JPEG"""
     load_invisible_font()
+    load_cour_font()
     pdf = Canvas(savefile if savefile else StdoutWrapper(), pageCompression=1)
     pdf.setCreator('hocr-tools')
     pdf.setTitle(os.path.basename(playground))
@@ -67,18 +68,19 @@
         height = h * 72 / dpi
         pdf.setPageSize((width, height))
         pdf.drawImage(image, 0, 0, width=width, height=height)
-        add_text_layer(pdf, image, height, dpi)
+        add_text_layer(pdf, image, height, dpi, scale_hocr)
         pdf.showPage()
     pdf.save()
 
 
-def add_text_layer(pdf, image, height, dpi):
+def add_text_layer(pdf, image, height, dpi, scale_hocr):
     """Draw an invisible text layer for OCR data"""
+    scale_to_pts = 72 / dpi * scale_hocr
     p1 = re.compile(r'bbox((\s+\d+){4})')
     p2 = re.compile(r'baseline((\s+[\d\.\-]+){2})')
     hocrfile = os.path.splitext(image)[0] + ".hocr"
     hocr = etree.parse(hocrfile, html.XHTMLParser())
-    for line in hocr.xpath('//*[@class="ocr_line"]'):
+    for line in hocr.xpath('//*[@class="ocr_line" or @class="ocrx_line"]'):
         linebox = p1.search(line.attrib['title']).group(1).split()
         try:
             baseline = p2.search(line.attrib['title']).group(1).split()
@@ -95,18 +97,23 @@
             rawtext = word.text_content().strip()
             if rawtext == '':
                 continue
-            font_width = pdf.stringWidth(rawtext, 'invisible', 8)
-            if font_width <= 0:
-                continue
             box = p1.search(word.attrib['title']).group(1).split()
             box = [float(i) for i in box]
+            #font_name = 'invisible'
+            #font_size = 8
+            font_name = 'CourierNew'
+            font_scale = 2.0
+            font_size = int((box[3] - box[1]) * scale_to_pts * font_scale)
+            font_width = pdf.stringWidth(rawtext, font_name, font_size)
+            if font_width <= 0:
+                continue
             b = polyval(baseline,
                         (box[0] + box[2]) / 2 - linebox[0]) + linebox[3]
             text = pdf.beginText()
             text.setTextRenderMode(3)  # double invisible
-            text.setFont('invisible', 8)
-            text.setTextOrigin(box[0] * 72 / dpi, height - b * 72 / dpi)
-            box_width = (box[2] - box[0]) * 72 / dpi
+            text.setFont(font_name, font_size)
+            text.setTextOrigin(box[0] * scale_to_pts, height - b * scale_to_pts)
+            box_width = (box[2] - box[0]) * scale_to_pts
             text.setHorizScale(100.0 * box_width / font_width)
             text.textLine(rawtext)
             pdf.drawText(text)
@@ -142,12 +149,17 @@
 w3R/aE28KsfY2J+RPNp+j+KaOoCey4h+Dd48b9O5G0v2K7j0AM6s+5WQ/E0wVoK+pA6/3bup7bJf
 CMGjwvxTsr74/f/F95m3TH9x8o0/TU//N+7/D/ScVcA=
 """.encode('latin1')
-    uncompressed = bytearray(zlib.decompress(base64.decodestring(font)))
+    uncompressed = bytearray(zlib.decompress(base64.decodebytes(font)))
     ttf = io.BytesIO(uncompressed)
     setattr(ttf, "name", "(invisible.ttf)")
     pdfmetrics.registerFont(TTFont('invisible', ttf))
 
 
+def load_cour_font():
+    ttf_file = "/usr/share/fonts/msttcore/cour.ttf"
+    pdfmetrics.registerFont(TTFont("CourierNew", ttf_file))
+
+
 if __name__ == "__main__":
     parser = argparse.ArgumentParser(
         description="Create a searchable PDF from a pile of hOCR and JPEG")
@@ -161,5 +173,12 @@
         "--savefile",
         help="Save to this file instead of outputting to stdout"
     )
+    parser.add_argument(
+        "--scale-hocr", "--scale-hocr-coord",
+        help="Scale hocr coordinates by this number",
+        dest="scale_hocr",
+        type=float,
+        default=1.0
+    )
     args = parser.parse_args()
-    export_pdf(args.imgdir, 300, args.savefile)
+    export_pdf(args.imgdir, 300, args.scale_hocr, args.savefile)
